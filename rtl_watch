#! /usr/bin/env python3
#  rtl_watch
#  Python program for real-time monitoring of ISM packets.
#
#  Uses an ISM-band monitoring computer that runs rtl_433 to
#  collect and analyze ISM-band (433MHz in the US) packet
#  broadcast by remote-sensing devices and received at the
#  monitoring computer via RTL_SDR dongle.
#
#  rtl_433 on the monitoring computer analyzes radio packets
#  and broadcasts the information about recognized packets via
#  mqtt broker host
#
#  rtl_watch subscribes to that published mqtt stream to
#  record, count, and analyze signal strength of packets
#  received by that RTL_SDR dongle.  rtl_watch can run on
#  the monitoring computer or any number of other computers
#  on the LAN to which the monitoring computer is connected.
#
#  Devices and analyzed data are displayed in real time in
#  a window on the computer running rtl_watch.
#  Analyzed data includes
#     Device Name, # of records seen,
#        and signal-to-noise ratio mean, standard deviation,
#        min, and max
#  The data are updated dynamically, as the packets are seen.
#
#  At any time, user can print a summary of devices seen
#  to date, and then analysis continues.
#
#  Written by H. David Todd, hdtodd@gmail.com, 2023.03.02
#  V2.0 modifications 2023.05

import argparse
import sys
import os
import signal
from   paho.mqtt import client as mqtt_client
import random
import json
import time
import datetime
import math
from   enum import IntEnum
try:
    import tkinter as tk
    from tkinter import ttk
    import tkinter.font as tkFont
except ImportError:
    import Tkinter as tk
    import ttk
    import Tkinter.font as tkFont

AP_DESCRIPTION="""
DNT:  Real-time monitor for ISM-band device transmissions
      as observed and published via MQTT by rtl_433.
"""

AP_EPILOG="""

"""

###################################################################################
# A class to compute mean, standard deviation, min, and max of a stream  of numbers
class Stats():

   def __init__(self, x):
      self.count = 1
      self.mean  = x
      self.std2  = 0.0
      self.min   = x
      self.max   = x
      
   def append(self,x):
      self.count += 1
      self.mean   = ((self.count-1)*self.mean + x)/self.count
      self.std2   = 0 if self.count<2 else ( (self.count-2)*self.std2 +
                                             (self.count*(self.mean-x)**2)/(self.count-1) )/(self.count-1)
      self.min    = x if x<self.min else self.min
      self.max    = x if x>self.max else self.max
      return

   def get(self):
      return (self.count, self.mean, math.sqrt(self.std2), self.min, self.max)

###################################################################################
# Global variable initialization

# MQTT connection management
# Parameters used to establish the mqtt connection to the rtl_433
#   receiver mqtt publisher
host      = None
topic     = "rtl_433/+/events"
port      = 1883
username  = ""
password  = ""
client_id = f'python-mqtt-{random.randint(0, 100)}'

# Variables and constants used globally
win        = None
frm_table  = None
fullscreen = False
bfont      = None
dfont      = None
hfont      = None
lfont      = None
pktcnt     = 0
first_rec  = True
debug      = False
CSIBLK     = "\033[30m"
CSIRED     = "\033[31m"
CSIYLW     = "\033[93m"
CSIMGN     = "\033[95m"
CSIBLU     = "\033[34m"
CSIGRN     = "\033[32m"
Warn_Sign  = "\U000026A0"
bl_flag    = "\U0000203C"  # '!!': want to use "\U0001FAAB" {low battery} but not available
st_flag    = "\U00002049"  # '?!'
Warnings   = [" ", st_flag, bl_flag]
Warn       = IntEnum('Warn', [ ('OK', 0), ('ALERT', 1), ('ALARM', 2)])

# Set 2-sec threshhold for rejecting duplicate records
dup_thresh = 2.0

# Set blank "lastEntry" key record fields for rejecting duplicate records
#   time+/-2sec with model+id the same count as a duplicate record
lastEntry = { "time":0.0, "device":"" }

##########################################################################################
# DoubleScrolledFrame class adapted from
#   https://gist.github.com/novel-yet-trivial/2841b7b640bba48928200ff979204115
class DoubleScrolledFrame:
    """
    A vertically scrolled Frame that can be treated like any other Frame
    ie it needs a master and layout and it can be a master.
    keyword arguments are passed to the underlying Frame
    except the keyword arguments 'width' and 'height', which
    are passed to the underlying Canvas
    note that a widget layed out in this frame will have Canvas as self.master,
    if you subclass this there is no built in way for the children to access it.
    You need to provide the controller separately.
    """
    def __init__(self, master, **kwargs):
        width = kwargs.pop('width', None)
        height = kwargs.pop('height', None)
        self.outer = tk.Frame(master, **kwargs)

        self.vsb = ttk.Scrollbar(self.outer, orient=tk.VERTICAL)
        self.vsb.grid(row=0, column=1, sticky='ns')
        self.hsb = ttk.Scrollbar(self.outer, orient=tk.HORIZONTAL)
        self.hsb.grid(row=1, column=0, sticky='ew')
        self.canvas = tk.Canvas(self.outer, highlightthickness=0, width=width, height=height)
        self.canvas.grid(row=0, column=0, sticky='nsew')
        self.outer.rowconfigure(0, weight=1)
        self.outer.columnconfigure(0, weight=1)
        self.canvas['yscrollcommand'] = self.vsb.set
        self.canvas['xscrollcommand'] = self.hsb.set
        # mouse scroll does not seem to work with just "bind"; You have
        # to use "bind_all". Therefore to use multiple windows you have
        # to bind_all in the current widget
        self.canvas.bind("<Enter>", self._bind_mouse)
        self.canvas.bind("<Leave>", self._unbind_mouse)
        self.vsb['command'] = self.canvas.yview
        self.hsb['command'] = self.canvas.xview

        self.inner = tk.Frame(self.canvas)
        # pack the inner Frame into the Canvas with the topleft corner 4 pixels offset
        self.canvas.create_window(4, 4, window=self.inner, anchor='nw')
        self.inner.bind("<Configure>", self._on_frame_configure)

        self.outer_attr = set(dir(tk.Widget))

    def __getattr__(self, item):
        if item in self.outer_attr:
            # geometry attributes etc (eg pack, destroy, tkraise) are passed on to self.outer
            return getattr(self.outer, item)
        else:
            # all other attributes (_w, children, etc) are passed to self.inner
            return getattr(self.inner, item)

    def _on_frame_configure(self, event=None):
        x1, y1, x2, y2 = self.canvas.bbox("all")
        height = self.canvas.winfo_height()
        width = self.canvas.winfo_width()
        self.canvas.config(scrollregion = (0,0, max(x2, width), max(y2, height)))

    def _bind_mouse(self, event=None):
        self.canvas.bind_all("<4>", self._on_mousewheel)
        self.canvas.bind_all("<5>", self._on_mousewheel)
        self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)

    def _unbind_mouse(self, event=None):
        self.canvas.unbind_all("<4>")
        self.canvas.unbind_all("<5>")
        self.canvas.unbind_all("<MouseWheel>")
        
    def _on_mousewheel(self, event):
        """Linux uses event.num; Windows / Mac uses event.delta"""
        func = self.canvas.xview_scroll if event.state & 1 else self.canvas.yview_scroll 
        if event.num == 4 or event.delta > 0:
            func(-1, "units" )
        elif event.num == 5 or event.delta < 0:
            func(1, "units" )
    
    def __str__(self):
        return str(self.outer)

###############################################################################
#  Create the command parser, parse cmd line,  and set defaults
def make_parser():

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=AP_DESCRIPTION, epilog=AP_EPILOG)

    parser.add_argument("-H", "--host", dest="host", type=str,
                        default=host,
                        help="MQTT hostname to connect to (default: %(default)s)")
    parser.add_argument("-T", "--topic", dest="topic", type=str,
                        default=topic,
                        help="rtl_433 MQTT event topic to subscribe to (default: %(default)s)")
    parser.add_argument("-U", "--username", type=str, default=username,
                        help="MQTT username, if needed; defaults to blank")
    parser.add_argument("-P", "--password", type=str, default=password,
                        help="MQTT password, if needed; defaults to blank")
    parser.add_argument("-p", "--port", type=int, default=port,
                        help="MQTT port (default: %(default)s)")
    parser.add_argument("-d", "--debug", dest="debug", action="store_true")
    parser.add_argument("-W", "--warn", dest="warn", action="store_true",
                        help="Insert warnings at pkts 20 & 40 to debug; requires -d")
    specifyTemp = parser.add_mutually_exclusive_group()
    specifyTemp.add_argument("-C", "--Celsius", dest="degC",
                             action="store_true", default=False,
                             help="Display temperatures in Celsius (default is Fahrenheit)")
    specifyTemp.add_argument("-F", "--Fahrenheit", dest="degC", action="store_false",
                             default=True,
                             help="Display temperatures in Fahrenheit (default)")
    args = parser.parse_args()
    return args

###############################################################################
# Set execution parameters from cmdline
def set_params():
    global host, topic, username, password, port, useF, tScale, debug, debugW

    args = make_parser()

    #  We need host and topic, so if not already provided by
    #    cmdline, env, or embedded source code, then ask for them
    if not args.host:
        if "MQTT_HOST" in os.environ:
            args.host = os.environ["MQTT_HOST"]
        else:
            if host is None:
                args.host = input("MQTT host name or IP: ")

    if not args.topic:
        if "MQTT_TOPIC" in os.environ:
            args.topic = os.environ["MQTT_TOPIC"]
        else:
            if topic is None:
                args.topic = input("MQTT topic: ")

    #  username and password may not be required, so don't prompt
    #    if not already provided; and port just defaults in parser
    if not args.username and 'MQTT_USERNAME' in os.environ:
        args.username = os.environ['MQTT_USERNAME']
    else:
        args.username = ""

    if not args.password and 'MQTT_PASSWORD' in os.environ:
        args.password = os.environ['MQTT_PASSWORD']
    else:
        args.password = ""

    if not args.port and 'MQTT_PORT' in os.environ:
        args.port = os.environ['MQTT_PORT']

    useF     = False if args.degC is not None and args.degC else True
    tScale   = "°F" if useF else "°C"
    host     = args.host
    topic    = args.topic
    username = args.username
    password = args.password
    port     = args.port
    debug    = args.debug
    debugW   = args.debug and args.warn
    if debug:
        print("Debug is ON")
        print("Parameter settings in execution are ...")
        print("\tMQTT host:    ", host)
        print("\tMQTT topic:   ", topic)
        print("\tMQTT username:", username)
        print("\tMQTT password:", password)
        print("\tMQTT port:    ", port)
        print("\tUseF:         ", useF)
        print("\tDebug warnings", debugW)
    return


###############################################################################
# Convert time from various formats to epoch time
def CnvTime(ts):
    if ts.find("-") > 0:
        try:
            eTime = datetime.datetime.fromisoformat(ts).timestamp()
        except ValueError as e:
            err={}
            print("datetime error in input line", lc, "converting time string: ", ts)
            print("datetime  msg:", err.get("error", str(e)))
            quit()
    else:
        try:
            eTime = float(ts)
        except ValueError as e:
            err = {}
            print("Datetime conversion failed on line", lc, "with datetime string", ts)
            print("float() error msg:", err.get("error", str(e)))
            quit()
    return(eTime)


###############################################################################
# Button action routines
def sortDevice():
    mqtt.loop_stop()
    row = 1
    for	device in sorted(devices):
        (cnt,snr,sigma,min,max) = devices[device].get()
        tbl[row][0].set(device)
        tbl[row][1].set(cnt)
        tbl[row][2].set(round(snr,1))
        tbl[row][3].set(round(sigma,2))
        tbl[row][4].set(round(min,1))
        tbl[row][5].set(round(max,1))
        row += 1

    mqtt.loop_start()
    return

def sortRecCnt():
    mqtt.loop_stop()
    cntlist = {}
    for device in devices:
        (cnt,snr,sigma,min,max) = devices[device].get()
        key = f"{cnt:06}" + device
        cntlist[key] = device
    row = 1
    for rec in sorted(cntlist, reverse=True):
        (cnt,snr,sigma,min,max) = devices[cntlist[rec]].get()
        tbl[row][0].set(cntlist[rec])
        tbl[row][1].set(cnt)
        tbl[row][2].set(round(snr,1))
        tbl[row][3].set(round(sigma,2))
        tbl[row][4].set(round(min,1))
        tbl[row][5].set(round(max,1))
        row += 1

    mqtt.loop_start()    
    return

def sortSnr():
    mqtt.loop_stop()
    cntlist = {}
    for device in devices:
        (cnt,snr,sigma,min,max) = devices[device].get()
        key = f"{snr:05.1f}" + device
        cntlist[key] = device
    row = 1
    for rec in sorted(cntlist, reverse=True):
        (cnt,snr,sigma,min,max) = devices[cntlist[rec]].get()
        tbl[row][0].set(cntlist[rec])
        tbl[row][1].set(cnt)
        tbl[row][2].set(round(snr,1))
        tbl[row][3].set(round(sigma,2))
        tbl[row][4].set(round(min,1))
        tbl[row][5].set(round(max,1))
        row += 1

    mqtt.loop_start()    
    return

###############################################################################
# Reset device warnings to OK and rewrite the display table accordingly
def reset_warn():
    mqtt.loop_stop()
    for dev in devices:
        devices[dev].battery = 1
        devices[dev].wlevel  = Warn.OK
        devices[dev].warn    = Warnings[Warn.OK]
    for row in range(1, len(tbl)):
        tbl[row][3].set(Warnings[Warn.OK])
    mqtt.loop_start()
    return

###############################################################################
# CNTL-C and QUIT button handler
def quit_prog(event=None):
    mqtt.loop_stop()
    print()
    time.sleep(1)      # let events clear (we hope)
    mqtt.disconnect()
    win.quit()
    sys.exit(0)

def printsum():
    global devices
    global dedups, totrecs
    mqtt.loop_stop()
    print("\n____________________________________________________________________")
    print("\n\nrtl_watch: Printing summary of recorded rtl_433 packets\n")
    print("First entry recorded at: ", earliest_time.get(),
          "\nLast entry recorded at:  ", last_time.get()) 
    print("Processed ", dedups, " de-duplicated records of a total of ", totrecs, " records")
    print("\n{:<25} {:>8} {:>8} ±{:>5} {:>8} {:>8}".format(
          "Device", "Rec Cnt", "Mean", "𝜎  ", "Min", "Max"))
    for device in sorted(devices):
        (n,avg,std,min,max) = devices[device].get()
        print("{:<25} {:>8} {:>8.1f} ±{:>5.2f} {:>8.1f} {:>8.1f}".format(device,n,avg,std,min,max))
    print("\n____________________________________________________________________")
    mqtt.loop_start()

###############################################################################
# Functions for displaying

# Toggle fullscreen
def toggle_fullscreen(event=None):
    global win
    global fullscreen

    fullscreen = not fullscreen
    win.attributes('-fullscreen', fullscreen)
    resize()
    return

# Automatically resize font size based on window size
def resize(event=None):
    global dfont
    global lfont
    global hfont
    global win

    # Resize font based on frame height (minimum size of 12)
    # Use negative number for "pixels" instead of "points"
    hfont.configure(size=-max(36, int((win.winfo_height() / 18))))
    dfont.configure(size=-max(24, int((win.winfo_height() / 24))))
    lfont.configure(size=-max(30, int((win.winfo_height() / 24))))

    return

"""
#######################################################################################
# Table management and display

# Add a row to the display table, "tbl", at current next-entry index and increment the index
# Format the widgets, and handle row 0 differently as it is the header
# Widget values get filled in by "main" (for header) or "on_message" (for data values)
def add_row(dRow):
    global frm_table, tbl
    tbl.append( (tk.StringVar(), tk.StringVar(), tk.StringVar() , tk.StringVar()) )
    row = tk.Frame(frm_table)
    # Color the header row differently
    if dRow==0:
        (bg, fg, fbg, ffg) = ("cornflower blue", "white", "yellow", "black")
    else:
        (bg, fg, fbg, ffg) = ("white", "black", "white", "black")

    lbl_loc  = tk.Label(row, width=30, textvariable=tbl[dRow][0], font=dfont, bg=bg, fg=fg)
    lbl_temp = tk.Label(row, width=7,  textvariable=tbl[dRow][1], font=dfont, bg=bg, fg=fg)
    lbl_hum  = tk.Label(row, width=4,  textvariable=tbl[dRow][2], font=dfont, bg=bg, fg=fg)
    lbl_flag = tk.Label(row, width=1,  textvariable=tbl[dRow][3], font=dfont, bg=fbg,fg=ffg)
    
    lbl_loc.grid( row=dRow, column=0, padx=5, pady=5, sticky=tk.W)
    lbl_temp.grid(row=dRow, column=1, padx=5, pady=5, sticky=tk.E)
    lbl_hum.grid( row=dRow, column=2, padx=5, pady=5, sticky=tk.E)
    lbl_flag.grid(row=dRow, column=3, padx=5, pady=5, sticky=tk.E)
    row.pack(side="top")
    return
"""

###############################################################################
# MQTT functions and display updating
# Connect to  MQTT host
def connect_mqtt() -> mqtt_client:
    def on_connect(mqtt, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT broker host!")
        else:
            print("Failed attempt to connect to ", mqtt)
            print("  with userdata ", userdata)
            print("Return code %d\n", rc)

    mqtt = mqtt_client.Client(client_id, clean_session=False)
    mqtt.username_pw_set(username, password)
    mqtt.on_connect = on_connect
    mqtt.connect(host, port)
    subscribe(mqtt)
    return mqtt

# Subscribe to rtl_433 publication & process records we receive
def subscribe(mqtt: mqtt_client):

    # on_message does the real work
    # When we get a record, ignore if it's a duplicate, update display if it isn't
    def on_message(mqtt, userdata, msg):
        global first_rec, last_rec
        global devices
        global dedups, totrecs
        global tbl, devnum
        
        # count this new record
        totrecs += 1
        # parse the json payload
        y = json.loads(msg.payload.decode())
        # Get time in seconds since Epoch for comparison purposes, with 2 sec threshhold
        eTime = CnvTime(y["time"])
        # Is this a duplicate record?  Use time+model+id as a fingerprint to tell.
        # If not a duplicate entry, then process & record; else skip
        # Some records don't have an "id" field, so just use "model" in those cases
        # If not a device record, just return
        if "model" not in y:
            return

        #  Create the device identifier as "model/channel/id"
        dev = y["model"] + "/"
        if "channel" in y:
            dev += str(y["channel"])
        dev += "/"
        if "id" in y:
            dev += str(y["id"])

        if eTime>lastEntry["time"]+dup_thresh and dev != lastEntry["device"]:
            dedups += 1
            snr = 0.0 if not ('snr' in y) else float(y['snr'])
            print("{:<25} {:<20} snr={:>4.1f}".format(dev, y["time"], snr) )

            if first_rec:
                earliest_time.set( y["time"])
                first_rec = False
            last_time.set(y["time"])

            if dev in devices:
                # We've seen this device, so just update the values
                #   in the data table and in the display table
                devices[dev].append(snr)
                (cnt,snr,sigma,min,max) = devices[dev].get()
                for i in range (1, len(tbl)):
                    if tbl[i][0].get()==dev:
                        tbl[i][1].set(cnt)
                        tbl[i][2].set(round(snr,1))
                        tbl[i][3].set(round(sigma,2))
                        tbl[i][4].set(round(min,1))
                        tbl[i][5].set(round(max,1))
                        
            else:
                # This is a new device: 1) create a table entry for it;
                #   2) create a display table row for it
                #   3) connect the display variables to the table
                #   4) assign the values to the display
                devices[dev] = Stats(snr)
                dRow = len(tbl)
                add_row(dRow)
                (cnt,snr,sigma,min,max) = devices[dev].get()
                tbl[dRow][0].set(dev)
                tbl[dRow][1].set(cnt)
                tbl[dRow][2].set(round(snr,1))
                tbl[dRow][3].set(round(sigma,2))
                tbl[dRow][4].set(round(min,1))
                tbl[dRow][5].set(round(max,1))
                
            lastEntry["time"] = eTime
            lastEntry["device"] = dev
            
    mqtt.subscribe(topic)
    mqtt.on_message = on_message
    print("subscribed to mqtt feed")


#######################################################################################
# Table management and display

# Add a row to the display table, "tbl", at current next-entry index and increment the index                         
# Format the widgets, and handle row 0 differently as it is the header                                               
# Widget values get filled in by "main" (for header) or "on_message" (for data values) 
def add_row(dRow):
    global frm_table, tbl

    tbl.append( (tk.StringVar(), tk.StringVar(), tk.StringVar(),
                 tk.StringVar(), tk.StringVar(), tk.StringVar() ) )
    row = tk.Frame(frm_table)
    # Color the header row differently                                                                               
    if dRow==0:
        (bg, fg, fbg, ffg) = ("cornflower blue", "white", "yellow", "black")
    else:
        (bg, fg, fbg, ffg) = ("white", "black", "white", "black")

    lbl_device = tk.Label(row, width=30, textvariable=tbl[dRow][0], font=dfont, bg=bg)
    lbl_reccnt = tk.Label(row, width=10, textvariable=tbl[dRow][1], font=dfont, bg=bg)
    lbl_snr    = tk.Label(row, width=10, textvariable=tbl[dRow][2], font=dfont, bg=bg)
    lbl_stdev  = tk.Label(row, width=10, textvariable=tbl[dRow][3], font=dfont, bg=bg)
    lbl_min    = tk.Label(row, width=10, textvariable=tbl[dRow][4], font=dfont, bg=bg)
    lbl_max    = tk.Label(row, width=10, textvariable=tbl[dRow][5], font=dfont, bg=bg)
    lbl_device.grid(row=dRow, column=0, padx=2, pady=2, sticky="W")
    lbl_reccnt.grid(row=dRow, column=1, padx=2, pady=2, sticky="W")
    lbl_snr.grid(   row=dRow, column=2, padx=2, pady=2, sticky="W")
    lbl_stdev.grid( row=dRow, column=3, padx=2, pady=2, sticky="W")
    lbl_min.grid(   row=dRow, column=4, padx=2, pady=2, sticky="W")
    lbl_max.grid(   row=dRow, column=5, padx=2, pady=2, sticky="W")
    row.pack(side="top")
    return


###############################################################################
# Create the display panels and table section
"""
def create_display():    
    global win, frm_table, dfont, hfont, lfont
    # Create the main window
    win = tk.Tk()
    win.title("Neighborhood Temperatures")

    # Create dynamic font for text
    hfont = tkFont.Font(size=-36)
    dfont = tkFont.Font(size=-24)
    lfont = tkFont.Font(size=-30, weight="bold")

    # Build the title section of the display
    frm_title = tk.Frame(win, borderwidth=10, relief="groove")
    frm_title.pack(side="top", fill="x", expand=False)
    lbl_title = tk.Label(frm_title, text="Display Neighborhood Temperatures",
                         font=hfont, bg="cornflower blue", fg="white")
    lbl_title.pack(anchor="center", fill="x")

    # Build the information section
    frm_info = tk.Frame(win, borderwidth=5, relief="raised")
    frm_info.pack(side="top", fill="x", expand=False)
    lbl_monitor = tk.Label(frm_info, text="Monitoring host: %s" % (host), font=dfont)
    btn_wrst    = tk.Button(frm_info, text="WRst",           width=4, height=1,
                           font=dfont, fg='green',command=reset_warn)
    btn_toggle = tk.Button(frm_info, text="Togl",           width=4, height=1,
                           font=dfont, fg='blue', command=toggle_fullscreen)
    btn_quit   = tk.Button(frm_info, text="Quit",           width=4,  height=1,
                           font=dfont, fg='red',  command=quit_prog)
    lbl_monitor.pack(side="left", padx=2, pady=2)
    btn_quit.pack(side="right")
    btn_toggle.pack(side="right")
    btn_wrst.pack(side="right")
    
    # And create the table for data display
    frm_table = DoubleScrolledFrame(win, width=700, borderwidth=5, relief=tk.GROOVE)
    frm_table.pack(side="top", fill="both", expand=True, padx=5, pady=5)

    # First, the header
    add_row(0)
    tbl[0][0].set("Location or Thermometer")
    tbl[0][1].set("Temp "+tScale)
    tbl[0][2].set("%RH")
    tbl[0][3].set(Warn_Sign)

    # Have <ESC> toggle window, and call resize() every time the window is resized
    win.bind('<Escape>', toggle_fullscreen)
    return
"""

def create_display():
    global win, frm_table, bfont, dfont, hfont, lfont
    global earliest_time, last_time
    
    # Create the main window and dynamic fonts
    win = tk.Tk()
    win.title("rtl_watch")
    hfont = tkFont.Font(size=40)
    bfont = tkFont.Font(size=24)
    dfont = tkFont.Font(size=18)
    lfont = tkFont.Font(size=30, weight="bold")

    # Build the title section of the display
    frm_title = tk.Frame(win, borderwidth=10, relief="groove")
    frm_title.pack(side="top", fill="x", expand=False)
    lbl_title  = tk.Label(frm_title, text="rtl_watch: monitor ISM devices using rtl_433",
                          font=hfont, bg="medium sea green", fg="white")
    lbl_title.pack(anchor="center", fill="x")

    # Build the button menu
    frm_toolbar = tk.Frame(win)
    frm_toolbar.pack(side="top", fill="x", expand=True)
    btn_device  = tk.Button(frm_toolbar, text="Sort Device",       command=sortDevice, font=bfont)
    btn_reccnt  = tk.Button(frm_toolbar, text="Sort Record Count", command=sortRecCnt, font=bfont)
    btn_snr     = tk.Button(frm_toolbar, text="Sort SNR",          command=sortSnr,    font=bfont)
    btn_prtsum  = tk.Button(frm_toolbar, text="Print Summary",     command=printsum,   font=bfont, fg="green")
    btn_stop    = tk.Button(frm_toolbar, text="Quit",              command=quit_prog,  font=bfont, fg="red")
    btn_device.pack(side="left")
    btn_reccnt.pack(side="left")
    btn_snr.pack(side="left")
    btn_stop.pack(side="right")
    btn_prtsum.pack(side="right")

    # Build the information section
    frm_info = tk.Frame(win, borderwidth=5, relief="raised")
    frm_info.pack(side="top", fill="x", expand=False)
    earliest_time = tk.StringVar()
    earliest_time.set(t.strftime('%Y-%m-%d %H:%M:%S'))
    last_time = tk.StringVar()
    last_time.set(t.strftime('%Y-%m-%d %H:%M:%S'))
    lbl_monitor = tk.Label(frm_info, text="Monitoring host: %s and topic: %s" % (host, topic), font=dfont)
    lbl_monitor.pack(side="top", padx=5, pady=5)
    #lbl_first = tk.Label(frm_info, text="Earliest record:\n%s" % earliest_time, font=dfont)
    lbl_first = tk.Label(frm_info, text="Earliest record:", font=dfont)
    lbl_first.pack(side="left", padx=5, pady=5)
    #lbl_last = tk.Label(frm_info, text="Latest record:\n%s" % last_time, font=dfont)
    lbl_ltime = tk.Label(frm_info, textvariable=last_time,     font=dfont)
    lbl_ltime.pack(side="right", padx=5, pady=5)
    lbl_last = tk.Label(frm_info, text="Latest record:",    font=dfont)
    lbl_last.pack(side="right", padx=5, pady=5)
    lbl_ftime = tk.Label(frm_info, textvariable=earliest_time, font=dfont)
    lbl_ftime.pack(side="left", padx=5, pady=5)

    # And create the table for data display, column header first
    frm_table = DoubleScrolledFrame(win, width=1000, relief="groove")
    frm_table.pack(side="top", fill="both", expand=True, padx=5, pady=5)

    # And insert the header as the first row
    add_row(0)
    tbl[0][0].set("Device\nmodel+id")
    tbl[0][1].set("Record\nCount")
    tbl[0][2].set("mean\nSNR")
    tbl[0][3].set("SNR\nStd Dev")
    tbl[0][4].set("Min\nSNR")
    tbl[0][5].set("Max\nSNR")

    win.bind('<Escape>', toggle_fullscreen)
    return

#######################################################################################
#  Main script

if __name__ == "__main__":

    t = datetime.datetime.now()
    signal.signal(signal.SIGINT, quit_prog)

    # Get command-line and enviroment parameters and set program variables
    set_params()

    # Initialize the Device:Data dictionary
    devices = {}

    # Init the list of widget rows to display
    tbl = []
    
    # Init the performance counters
    totrecs = 0
    dedups  = 0
    devnum = 0

    # Create the display
    create_display()

    # Connect to the mqtt host and subscribe to the feed.                                                            
    # This activates the on_message procedure in which 
    #   MQTT events cause the displayed values to be updated
    
    mqtt = connect_mqtt()
    mqtt.loop_start()

    if debug:
        print("Entering main run loop")

    # Start the tkinter main loop and let MQTT events populate the display
    win.mainloop()
